// Project.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <ctime>
#include <string>

using namespace std;

const int MAX_TRIES = 5;
int letterFill(char, string, string&);

int main()
{
    string name;
    string yes_or_no;
    char letter;
    int num_of_wrong_guesses = 0;
    string hint;

    string word;
    string words[] =
    {
        "canada",
        "america",
        "newyork",
        "california",
        "chicago",
        "toronto",
        "vancouver",
        "texas",
        "florida",
        "seattle"
    };

    // Choose and copy a word from the array of words randomly
    srand(time(NULL));
    int n = rand() % 10; // Range from 0 to 9
    word = words[n];     // Randomly selected word

    // Provide a hint for each selected word
    switch (n) 
    {
    case 0: // Canada
        hint = "Hint: The country to the north of the USA";
        break;
    case 1: // America
        hint = "Hint: The country known for its 'stars and stripes'";
        break;
    case 2: // New York
        hint = "Hint: This city is known as 'The Big Apple'";
        break;
    case 3: // California
        hint = "Hint: This state is home to Hollywood";
        break;
    case 4: // Chicago
        hint = "Hint: This city is known as 'The Windy City'";
        break;
    case 5: // Toronto
        hint = "Hint: The largest city in Canada";
        break;
    case 6: // Vancouver
        hint = "Hint: A city on the west coast of Canada";
        break;
    case 7: // Texas
        hint = "Hint: This state is known for its cowboy culture";
        break;
    case 8: // Florida
        hint = "Hint: This state is known for its warm weather and beaches";
        break;
    case 9: // Seattle
        hint = "Hint: This city is known for its Space Needle";
        break;
    }

    // Initialize the secret word with the * character.
    string unknown(word.length(), ('_'));

    // Welcome message
    cout << "\n\nWelcome to the guessing game... Guess a place!";
    cout << "\n\nEach letter is represented by an underscore.";
    cout << "\n\nYou have to type only one letter in one try.";
    cout << "\n\nYou have " << MAX_TRIES << " tries to guess the word.";
    cout << "\n~" << endl;

    // Loop until the guesses are used up
    while (num_of_wrong_guesses < MAX_TRIES)
    {
        cout << endl << hint << endl;
        cout << "\n\n" << unknown;
        cout << "\n\nGuess a letter: ";
        cin >> letter;

        // Fill secret word with letter if the guess is correct,
        // otherwise increment the number of wrong guesses.
        if (letterFill(letter, word, unknown) == 0)
        {
            cout << endl << "\nWhoops! That letter isn't in there!" << endl;
            num_of_wrong_guesses++;
        }
        else
        {
            cout << endl << "\nYou found a letter! Good job!" << endl;
        }

        // Tell user how many guesses are left.
        cout << "\nYou have " << MAX_TRIES - num_of_wrong_guesses << " guesses left." << endl;

        // Check if the user guessed the word.
        if (word == unknown)
        {
            cout << word << endl;
            cout << "\nYeah! You got it!" << endl;
            cout << "\nWould you like to play another round? (yes/no): ";
            cin >> yes_or_no;

            if (yes_or_no == "yes")
            {
                main(); // Restart the game
            }
            else
            {
                cout << "Closing program..." << endl;
                return 0;
            }
            break;
        }
    }

    // If the user used all their tries
    if (num_of_wrong_guesses == MAX_TRIES)
    {
        cout << "\nSorry, you lose." << endl;
        cout << "\nThe word was " << word << endl;
        cout << "\nWould you like to play another round? (yes/no): ";
        cin >> yes_or_no;

        if (yes_or_no == "yes")
        {
            main();
        }
        else
        {
            cout << "Closing program..." << endl;
            return 0;
        }
    }

    return 0;
}

/* Take a one-character guess and the secret word, and fill in the
   unfinished guess word. Returns the number of characters matched.
   Also, returns zero if the character was already guessed. */
int letterFill(char guess, string secretword, string & guessword)
{
    int matches = 0;
    int len = secretword.length();
    for (int i = 0; i < len; i++)
    {
        // Check if the letter was already guessed
        if (guess == guessword[i])
            return 0;
        // Check if the guess is in the secret word
        if (guess == secretword[i])
        {
            guessword[i] = guess;
            matches++;
        }
    }
    return matches;
}
